
package com.company;
public class CarList {
    private CarListNode head;
    private CarListNode tail;
    private CarListNode cursor;
    private int num;
    public CarList() {
        head = null;
        tail = null;
        cursor = null;
        num = 0;
    }

    /**
     * returns number of cars in method
     * @return
     */
    public int numCars(){
        return this.num;
    }

    /**
     * returns car at cursor
     * @return
     */
    public Car getCursorCar(){
    if(cursor == null)
        return null;
    else
       return cursor.getData();
    }
    /**
     * resets cursor to head
     */
    public void resetCursorToHead(){
        if(head != null){
            cursor = head;
        }
        else if(head == null)
            cursor = null;
            System.out.println("There are no Cars in this list");
    }

    /**
     * moves cursor forward
     * @throws EndOfListException
     */
    public void cursorForward() throws EndOfListException {
        if(cursor==null){
            throw new EndOfListException();
        }
        else
            this.cursor.getNext();
    }

    /**
     * moves cursor backwards
     * @throws EndOfListException
     */
    public void cursorBackward() throws EndOfListException {
        if(cursor.getPrev() == null)
            throw new EndOfListException();
        else
            cursor.getPrev();
    }

    /**
     *Inserts the indicated Car before the cursor.
     * @param newCar
     */
    public void insertBeforeCursor(Car newCar){
        CarListNode newNode = new CarListNode(newCar);
        if(cursor != head){
            newNode.setNext(cursor);
            newNode.setPrev(cursor.getPrev());
            cursor.setPrev(newNode);
            cursor.getPrev().setNext(newNode);
            num++;
        }
        else if(cursor == null){
            head = newNode;
            tail = newNode;
            cursor = newNode;
            num++;
        }
        else if(cursor == head){
            newNode.setNext(head);
            head.setPrev(newNode);
            head = newNode;
            num++;
        }
        else if(newCar == null){
            throw new IllegalArgumentException();
        }
    }

    /**
     * Inserts the indicated Car after the tail of the list.
     * @param newCar
     */
    public void appendToTail(Car newCar)  {
        if(newCar==null) throw new IllegalArgumentException();
        CarListNode temp = new CarListNode(newCar);
        if(tail == null){
           this.head = this.tail = this.cursor = temp;
        }
        else {
            tail.setNext(temp);
            temp.setPrev(tail);
            tail = temp;
        }
        num ++;
    }

    /**
     * Removes the CarListNode referenced by cursor and returns the Car inside.
     * @return
     * @throws EndOfListException
     */
    public Car removeCursor() throws EndOfListException {
        if (cursor == null){
            throw new EndOfListException();
        }
        else if (cursor != null) {
            CarListNode nodePrev = cursor.getPrev();
            CarListNode nodeNext = cursor.getNext();
            nodePrev.setNext(cursor.getNext());
            nodeNext.setPrev(cursor.getPrev());
            cursor = nodePrev;
        }
        num--;
        return cursor.getData();
    }

    /**
     * prints lists as a string
     * @return
     */
    public String toString() {
        CarListNode newCursor = this.head;
        String retValue = "-------------- \n";
        while(newCursor != null){
            retValue += newCursor.getData().getOwner() + "'s " + newCursor.getData().getMake();
            newCursor = newCursor.getNext();
        }
        return retValue;
    }
}
